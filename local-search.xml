<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SVG 坐标系</title>
    <link href="/2023/10/09/svg-coordinate-systems/"/>
    <url>/2023/10/09/svg-coordinate-systems/</url>
    
    <content type="html"><![CDATA[<p>参考资料</p><ul><li>SVG：可缩放矢量图形 | MDN</li><li>Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and prese</li><li>Coordinate Systems, Transformations and Units — SVG 2</li><li>A Guide to SVG Animations (SMIL) | CSS-Tricks</li></ul><p>##Svg 画布<br>画布(canvs)是绘制 SVG 内容的空间或区域。从概念上讲，这块画布在两个维度(X轴, Y轴)上都是无限的。因此，SVG 可以是任意大小。然而，它是相对于称为视口(viewport)的有限区域在屏幕上渲染的。超出视口边界的 SVG 区域将被剪掉并且不可见。<br>视口（viewport）<br>视口是 SVG 画布的可见区域. 整个 SVG 画布或部分画布是否可见取决于该cavas的大小和preserveAspectRatio 属性的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- the viewport will be 800px by 600px --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SVG content drawn onto the SVG canvas --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 SVG 中，可以使用或不使用单位标识符来设置值。无单位值据说是使用用户单位在用户空间中指定的。如果以用户单位指定值，则假定该值等于相同数量的“px”单位。这意味着上例中的视口将渲染为 800px x 600px 视口。您还可以使用单位指定值。 SVG 中支持的长度单位标识符有：em、ex、px、pt、pc、cm、mm、in 和百分比。一旦设置了最外层 SVG 元素的宽度和高度，浏览器就会建立 <strong>初始视口坐标系(viewport coordinate system)</strong> 和 <strong>初始用户坐标系(initial user coordinate system.)</strong></p><h2 id="初始化坐标系"><a href="#初始化坐标系" class="headerlink" title="初始化坐标系"></a>初始化坐标系</h2><p>初始视口坐标系是在视口上建立的坐标系，原点位于视口左上角的点(0, 0)，x轴正方向向右，y轴正方向向下，初始坐标系中的一个单位等于视口中的一个“像素”。这个坐标系类似于用CSS盒模型在HTML元素上建立的坐标系。<br>初始用户坐标系是在SVG画布上建立的坐标系。该坐标系最初与视口坐标系相同 - 它的原点位于视口的左上角，正 x 轴指向右侧，正 y 轴指向下方。使用 viewBox 属性，可以修改初始用户坐标系（也称为当前坐标系或使用中的用户空间），使其不再与视口坐标系相同<br><img src="/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.PNG"></p><h2 id="SVG-坐标系变换"><a href="#SVG-坐标系变换" class="headerlink" title="SVG 坐标系变换"></a>SVG 坐标系变换</h2><p>Transform 属性值<br>Transform 属性给元素指定一个或多个变换。它采用 <transform-list> 作为值，该值被定义为变换定义列表，这些变换定义按提供的顺序应用。各个转换定义由空格或逗号分隔。对元素应用转换的示例可能如下所示：</p><p>Svg 变换包含以下几种：<strong>旋转（rotation）__、__缩放（scaling）__、__平移（translation）</strong> 和 __倾斜（skewing）__。 Transform 属性中使用的转换函数的工作方式与 Transform 属性中的 CSS 转换函数的工作方式类似，只是它们采用不同的参数。</p><h3 id="矩阵-（Matrix）"><a href="#矩阵-（Matrix）" class="headerlink" title="矩阵 （Matrix）"></a>矩阵 （Matrix）</h3><p>你可以通过matrix() 方法来将一个或多个变换应用到element 上. Martix 语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">matrix</span>(&lt;a&gt; &lt;b&gt; &lt;c&gt; &lt;d&gt; &lt;e&gt; &lt;f&gt;)<br><br>&lt;g transform=<span class="hljs-string">&quot;matrix(1 ,0, 0,1, 0,0)&quot;</span>&gt;&lt;/g&gt;<br></code></pre></td></tr></table></figure><p>除特别精通数学，一般不建议使用， 更多信息可参考 <a href="https://www.w3.org/TR/SVG/coords.html#VectorEffectsCalculation">w3网址</a></p><h3 id="平移（Translation）"><a href="#平移（Translation）" class="headerlink" title="平移（Translation）"></a>平移（Translation）</h3><p>想要移动一个svg 元素，可以使用 translate() 函数，语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">translate</span>(&lt;tx&gt; [&lt;ty&gt;])<br></code></pre></td></tr></table></figure><p>translate() 接受一个或两个值，分别指定水平和垂直移动。 tx表示沿x轴的平移值； ty 表示沿 y 轴的平移值。<br>ty 值是可选的；如果省略，则默认为零。 tx 和 ty 值可以以空格分隔或以逗号分隔，并且它们在函数内无需任何单位 - 它们默认为用户当前坐标系单位。<br>以下示例将圆向右平移 100 个用户单位，向下平移 300 个用户单位：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;circle cx=<span class="hljs-string">&quot;0&quot;</span> cy=<span class="hljs-string">&quot;0&quot;</span> r=<span class="hljs-string">&quot;100&quot;</span> transform=<span class="hljs-string">&quot;translate(100 300)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>如果使用 translate(100, 300) （其中值以逗号分隔），则上面的示例仍然有效。</p><h3 id="缩放（Scaling）"><a href="#缩放（Scaling）" class="headerlink" title="缩放（Scaling）"></a>缩放（Scaling）</h3><p>您可以使用scale()函数转换来放大或缩小SVG元素。缩放变换的语法是：<br>scale(<sx> [<sy>])<br>scale() 函数接收一个或两个值，分别指定水平和垂直缩放值。 sx表示沿x轴的缩放值，用于水平拉伸或收缩元素； sy 表示沿 y 轴的缩放值，用于垂直拉伸或收缩元素。<br>sy 值是可选的；如果省略，则假定等于 sx。 sx 和 sy 值可以用空格分隔，也可以用逗号分隔，并且它们是无单位的数字。<br>以下示例通过将元素缩放到原始大小的两倍来将元素的大小加倍：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(2)&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>以下代码将元素水平放大为原来2倍，垂直缩小为原来的一半：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(2 0.5)&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>如果使用scale(2, .5)（其中值以逗号分隔)，则上面的示例仍然有效。<br>这里需要注意的是，当缩放 SVG 元素时，其整个当前坐标系也会缩放，导致该元素也在视口内重新定位。</p><h3 id="倾斜（Skew）"><a href="#倾斜（Skew）" class="headerlink" title="倾斜（Skew）"></a>倾斜（Skew）</h3><p>SVG 元素也可以倾斜。通过两个函数：skewX 和 skewY实现倾斜操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">skewX</span>(&lt;skew-angle&gt;)<br><span class="hljs-title function_">skewY</span>(&lt;skew-angle&gt;)<br></code></pre></td></tr></table></figure><p>skewX 函数指定沿 x 轴的倾斜变换； skewY 函数指定沿 y 轴的倾斜变换。<br>指定的倾斜角度是无单位角度，默认为度。<br>请注意，倾斜元素可能会导致元素在视口内重新定位</p><h3 id="旋转（Rotation）"><a href="#旋转（Rotation）" class="headerlink" title="旋转（Rotation）"></a>旋转（Rotation）</h3><p>您可以使用rotate()函数旋转SVG元素。该函数的语法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">rotate</span>(&lt;rotate-angle&gt; [&lt;cx&gt; &lt;cy&gt;])<br></code></pre></td></tr></table></figure><p>rotate() 可设置指定点，指定角度进行旋转。与 CSS 中的旋转变换不同，您不能指定度以外的角度单位。角度值指定为无单位，默认情况下被视为度值。<br>可选的 cx 和 cy 用于设置旋转中心，无单位值。如果未提供 cx 和 cy，则旋转围绕当前用户坐标系的原点<br>在rotate()函数中指定旋转中心就像CSS中设置transform:rotate()和transform-origin的简写方式。由于 SVG 中的默认旋转中心是当前使用的用户坐标系的左上角，并且这可能不允许您创建所需的旋转效果，因此您最终可能会在rotate() 中指定一个新的中心。如果您知道元素在 SVG 画布中的尺寸和位置，则可以轻松地将其中心指定为旋转中心。<br>以下示例围绕当前用户坐标系中位于 (50, 50) 的指定旋转中心旋转一组元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(45 50 50)&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- elements making up a parrot shape --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是，如果你希望元素绕其中心旋转，你可能想将中心指定为 50% 50%，就像在 CSS 中所做的那样；但不幸的是，在rotate()函数内部这样做是不可能的——必须使用绝对坐标。但是，你可以结合使用 CSS 变换源属性和 CSS 变换属性来执行此操作</p><h3 id="坐标系变换"><a href="#坐标系变换" class="headerlink" title="坐标系变换"></a>坐标系变换</h3><p>现在我们已经涵盖了 SVG所有的变换方法 ，我们深入到SVG元素应用变换后的视觉变化。这将是SVG 变换最重要的部分。这将是它们被称为“坐标系变换”而不仅仅是“元素变换”原因。<br>在这个规范中，transform 属性被定义可为元素建立新用户空间（当前坐标系）的两个属性之一 - viewBox 属于另外一个。那么这到底代表什么呢？<br>The transform attribute establishes a new user space (current coordinate system) on the element it is | applied to.<br>此行为类似于应用于 HTML 元素的 CSS 转换的行为 — HTML 元素的坐标系被转换，当连续转换时通常最为明显（我们稍后会介绍）。尽管 HTML 和 SVG 转换在许多方面相似，但它们还是存在一些差异。<br>主要区别在于坐标系。 HTML 元素的坐标系是建立在元素本身上的。同时，在 SVG 中，元素的坐标系最初是当前使用的坐标系或用户空间。<br>当您将变换属性应用于 SVG 元素时，该元素将获得当前使用的用户坐标系的“副本”。您可以将其视为只是为转换后的元素创建一个新的“图层”，其中新图层有自己的当前用户坐标系（viewBox）的副本。<br>然后，元素的新当前坐标系通过已经被元素的transfrom 指定属性变换了 ，从而导致元素本身的变换。就好像元素被绘制到变换后的坐标系中的画布上一样。<br>要了解如何应用 SVG 转换，让我们从视觉部分开始。下图显示了我们将要使用的 SVG 画布。<br><img src="/img/svg/svg%E5%88%9D%E5%A7%8B%E5%9D%90%E6%A0%87%E7%B3%BB.png"></p><p>鹦鹉和狗是我们要转换的元素（组 <g>）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>灰色坐标系是viewBox建立的画布的初始坐标系。为了简单起见，我不会更改初始坐标系 - 我使用与视口大小相同的 viewBox，如上面的代码所示。<br>When you apply the transform attribute to an SVG element, that element gets a “copy” of the current user coordinate system in use.<br>现在我们已经建立了画布和初始用户空间，我们将开始转换元素。我们首先将鹦鹉向左平移 150 个单位，向下平移 200 个单位。<br>当然，鹦鹉是由多种路径和形状组成的。将 Transform 属性应用于包裹这些形状的组 <g> 就足够了；这会将g 下的所有形状都做同等变换。有关详细信息，请参阅有关构建和分组 SVG 的文章。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;translate(150 200)&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下图展示了通过上面的变换来平移鹦鹉。鹦鹉的半透明版本显示应用变换之前的初始位置。<br><img src="/img/svg/translate-150-200.png"><br>Svg 应用变换后的效果和HTML元素应用了CSS 变换效果一致 。我们之前提到过，元素基于transfrom 属性会建立一个新的当前用户坐标系。下图在 鹦鹉元素在变换后建立的初始坐标系的“副本”。注意鹦鹉当前的坐标系是如何平移的。<br><img src="/img/svg/%E5%B9%B3%E7%A7%BB%E5%AF%B9%E6%AF%94.png"><br>这里需要注意的是，在元素上建立的新当前坐标系是初始用户空间的复制，其中保留了元素的位置。这意味着它不是建立在元素的边界上，新的当前坐标系的大小也不受元素大小的限制。这就是 HTML 和 SVG 坐标系之间的差异所在。<br>现在让我们尝试别的东西。我们要把鹦鹉放大一倍：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(2)&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缩放 SVG 元素的结果与缩放 HTML 元素的结果不同。缩放后的 SVG 元素的位置在视口内发生变化。下图显示了将鹦鹉的尺寸放大一倍的结果。注意初始位置和大小，以及最终大小和位置。<br><img src="/img/svg/%E6%94%BE%E5%A4%A7%E4%B8%80%E5%80%8D.png"><br>从上图中我们可以注意到，不仅鹦鹉的尺寸（宽度和高度）增加了一倍，而且坐标（x和y）也乘以缩放因子（这里是2）<br>我们最终得到这个结果的原因是我们之前提到的：元素当前的坐标系被转换，然后鹦鹉被绘制到新的系统中。因此，在本例中，当前坐标系已缩放。此效果类似于使用 viewBox &#x3D; “0 0 400 300” 的效果，它“放大”到坐标系，从而将其中内容的大小加倍<br>因此，如果我们将鹦鹉变换后的当前坐标系绘制出来，我们将得到以下结果：<br><img src="/img/svg/%E5%A4%A7%E5%B0%8F%E5%8A%A0%E5%80%8D.png"><br>鹦鹉的新当前坐标系被放大，同时“放大”到鹦鹉。请注意，在当前坐标系内，鹦鹉不会重新定位，只是缩放坐标系的效果将其在视口内重新定位。鹦鹉被放大后的坐标系中以其原始 x 和 y 坐标绘制。<br>让我们尝试使用不同的缩放因子在两个方向上缩放鹦鹉。如果我们通过应用transform&#x3D;”scale(2 0.5)来缩放鹦鹉，我们会将其宽度加倍，同时使其高度为原始高度的一半。效果将类似于应用viewBox&#x3D;”0 0 400 1200”。<br><img src="/img/svg/viewBox%E6%94%BE%E5%A4%A7.png"><br>注意鹦鹉在缩放坐标系内的位置，并将其与初始系统（半透明鹦鹉）中的位置进行比较：x 和 y 位置坐标被保留。<br>倾斜 SVG 中的元素也会导致该元素因其当前坐标系倾斜而被“移动”。<br>假设我们使用 skewX 函数沿 x 轴对狗应用倾斜变换。我们要将狗水平倾斜 25 度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;skewX(25)&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the dog --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下图显示了对狗应用倾斜变换的结果。它的坐标系是倾斜，所以小狗也是倾斜的<br><img src="/img/svg/x%E8%BD%B4%E5%80%BE%E6%96%9C.png"><br>请注意，由于坐标系倾斜，狗的位置相对于其原始位置也会发生变化。<br>下图显示了使用 skewY() 而不是 skewX 将狗倾斜相同角度的结果：<br><img src="/img/svg/Y%E8%BD%B4%E5%80%BE%E6%96%9C.png"><br>，让我们尝试旋转鹦鹉。默认旋转中心是当前用户坐标系的左上角。建立在旋转元素上的新的当前系统也将被旋转。在下面的示例中，我们将把鹦鹉旋转 45 度。正旋转方向为顺时针方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(45)&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述转换的结果如下所示：<br><img src="/img/svg/%E6%97%A0%E4%B8%AD%E5%BF%83%E7%82%B9%E6%97%8B%E8%BD%AC.png"><br>除了坐标系的默认原点外，你可能还想围绕某个点旋转某个元素。使用 transform 属性中的 rotate() 函数，可以明确指定该点。假设我们要将本示例中的鹦鹉围绕其中心旋转。根据鹦鹉的宽度、高度和位置，我可以确定它的中心大约在（150，170）处。然后就可以围绕这一点旋转鹦鹉：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 800 600&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parrot&quot;</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(45 150 170)&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- shapes and paths forming the parrot --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，鹦鹉被旋转，看起来就像这样：<br><img src="/img/svg/%E6%8C%87%E5%AE%9A%E7%82%B9%E6%97%8B%E8%BD%AC.png"><br>我们说过，变换是作用于坐标系，因此元素最终也会受到影响并发生变换。那么，对于原点位于点（0，0）的坐标系来说，改变旋转中心究竟是如何起作用的呢？<br>当你更改旋转中心时，坐标系先平移，再旋转指定角度，然后根据您指定的旋转中心再次平移特定值。在本示例中</p><pre><code class="html">&lt;g id=&quot;parrot&quot; transform=&quot;rotate(45 150 170)&quot;&gt;</code></pre><p>浏览器通过执行了一系列的平移和旋转操作相当于：</p><pre><code class="html">&lt;g id=&quot;parrot&quot; transform=&quot;translate(150 170) rotate(45) translate(-150 -170)&quot;&gt;  </code></pre><p>当前坐标系将平移到你设置的中心点。然后它会根据你指定角度进行旋转。最后，在反向平移回来。上述变换视觉效果如下<br><img src="/img/svg/%E5%B9%B3%E7%A7%BB-%E6%97%8B%E8%BD%AC-%E5%B9%B3%E7%A7%BB.png"><br>在进入下一节嵌套和链式变换之前，我想指出的是，每一个元素通过变换后的用户坐标系之间都是相互独立的。下图显示了在狗和鹦鹉上建立的两个坐标系，以及它们是如何相互独立的。<br><img src="/img/svg/%E5%9D%90%E6%A0%87%E7%B3%BB%E7%8B%AC%E7%AB%8B.png"><br>另请注意，每个当前坐标系都隶属于<svg> 上的 viewBox 属性建立的画布的主坐标系内，viewBox 的任何变换都会影响整个画布及其内部的所有元素，无论它们是否有自己建立的坐标系。<br>例如，下面是将整个画布的用户空间从 viewBox&#x3D;”0 0 800 600” 更改为 viewBox&#x3D;”0 0 600 450” 的结果。整个画布被放大，同时保留每个元素原有的变换<br><img src="/img/svg/%E6%94%BE%E5%A4%A7.png"><br>对比上面的图片看一下<br><img src="/img/svg/viewbox%E5%AF%B9%E6%AF%94.png"><br>嵌套和链式转换<br>很多时候你可能想要对一个元素应用多个转换。在原始元素上应用多个转换就是所谓的“链式”转换。<br>当应用链式变换时，需要注意的是:像 HTML 元素变换一样，每个变换都是基于前一次变换后的用户坐标系进行变换。<br>例如，元素要先旋转在平移，则平移将根据旋转后的新的坐标系进行，而不是初始的非旋转坐标系。<br>下面的例子就是这样做的。我们应用之前的旋转，然后沿正 x-axistransform&#x3D;”rotate(45 150 170) translate(200)” 将鹦鹉平移 200 个单位。<br><img src="/img/svg/%E5%B5%8C%E5%A5%97%E9%93%BE%E5%BC%8F%E9%93%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node.js 部署脚本</title>
    <link href="/2023/09/26/micro-deploy/"/>
    <url>/2023/09/26/micro-deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="node-js-自动打包-部署脚本"><a href="#node-js-自动打包-部署脚本" class="headerlink" title="node.js 自动打包&amp;&amp;部署脚本"></a>node.js 自动打包&amp;&amp;部署脚本</h1><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><blockquote><p>采用 ES module 用法，package.json type 需要设置为 module </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><h2 id="添加配置文件server-json"><a href="#添加配置文件server-json" class="headerlink" title="添加配置文件server.json"></a>添加配置文件server.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;****&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;****&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*****&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;****&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;localDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;release/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;backUp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fs&quot;</span>;<br><span class="hljs-keyword">const</span> configFilePath = path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&quot;server.json&quot;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(fs.<span class="hljs-title function_">readFileSync</span>(configFilePath));<br></code></pre></td></tr></table></figure><h2 id="链接服务器"><a href="#链接服务器" class="headerlink" title="链接服务器"></a>链接服务器</h2><p>安装 node-ssh 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i node-ssh -D<br>npm i ora -D <br>npm i chalk -D<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> chalk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;chalk&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Ora</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ora&quot;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">connectServer</span>(<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-keyword">let</span> spinner = <span class="hljs-title class_">Ora</span>(chalk.<span class="hljs-title function_">cyan</span>(<span class="hljs-string">`[info] connecting server....\n`</span>)).<span class="hljs-title function_">start</span>();<br>  <span class="hljs-keyword">const</span> sshLoginParam = &#123;<br>    <span class="hljs-attr">host</span>: config.<span class="hljs-property">host</span>,<br>    <span class="hljs-attr">port</span>: config.<span class="hljs-property">port</span>,<br>    <span class="hljs-attr">username</span>: config.<span class="hljs-property">username</span>,<br>    <span class="hljs-attr">password</span>: config.<span class="hljs-property">password</span>,<br>  &#125;;<br><span class="hljs-comment">//   链接</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">SSH</span>.<span class="hljs-title function_">connect</span>(sshLoginParam)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      spinner.<span class="hljs-title function_">succeed</span>(chalk.<span class="hljs-title function_">green</span>(<span class="hljs-string">`[info] connected server \n`</span>));<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      spinner.<span class="hljs-title function_">fail</span>(chalk.<span class="hljs-title function_">red</span>(<span class="hljs-string">`[error] connect server failed\n`</span>));<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>      process.<span class="hljs-title function_">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加执行命令方法"><a href="#添加执行命令方法" class="headerlink" title="添加执行命令方法"></a>添加执行命令方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// cmd 需要执行的命令</span><br><span class="hljs-comment">// cwd 执行命令所在的目录</span><br><span class="hljs-comment">// await runCommand(`rm -rf test-dir`, &#x27;/home&#x27;)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">runCommand</span>(<span class="hljs-params">cmd, cwd</span>) &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">SSH</span>.<span class="hljs-title function_">execCommand</span>(cmd, &#123;<br>    cwd,<br>    <span class="hljs-comment">// onStderr(chunk) &#123;</span><br>    <span class="hljs-comment">//   logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);</span><br>    <span class="hljs-comment">// &#125;,</span><br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="执行推送文件到远程"><a href="#执行推送文件到远程" class="headerlink" title="执行推送文件到远程"></a>执行推送文件到远程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// localDir 本地文件目录</span><br><span class="hljs-comment">// remoteDir 远程文件目录</span><br><span class="hljs-keyword">await</span> <span class="hljs-variable constant_">SSH</span>.<span class="hljs-title function_">putDirectory</span>(localDir, remoteDir);<br></code></pre></td></tr></table></figure><h2 id="child-process-开启子shell执行命令"><a href="#child-process-开启子shell执行命令" class="headerlink" title="child_process 开启子shell执行命令"></a>child_process 开启子shell执行命令</h2><!-- @example spawnCommand('yarn', ['build'], process.cwd()) --><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">spawnCommand</span> = (<span class="hljs-params">command, params, cwd</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">spawn</span>(command, params, &#123;<br>      cwd,<br>      <span class="hljs-attr">stdio</span>: <span class="hljs-string">&#x27;inherit&#x27;</span>, <span class="hljs-comment">// 打印命令原始输出</span><br>      <span class="hljs-comment">// 在mac 环境下出问题是可以尝试直接将shell 设置为true</span><br>      <span class="hljs-attr">shell</span>: process.<span class="hljs-property">platform</span> === <span class="hljs-string">&#x27;win32&#x27;</span>, <span class="hljs-comment">// 兼容windows系统</span><br>    &#125;);<br><br>    result.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(err);<br>    &#125;);<br><br>    result.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (code === <span class="hljs-number">0</span>) <span class="hljs-title function_">resolve</span>();<br>      <span class="hljs-keyword">else</span> <span class="hljs-title function_">reject</span>(code);<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h1><pre><code class="js">import Ora from &quot;ora&quot;;import * as NodeSSH from &quot;node-ssh&quot;;import fs from &quot;fs&quot;;import * as path from &quot;path&quot;;import chalk from &quot;chalk&quot;;import  &#123; spawn &#125; from &#39;child_process&#39;;// 根目录const REMOTE_ROOT = &quot;/home/simtek-cloud/front/all/html&quot;;// 主APP目录const MAIN_APP = `main-app`;const SSH = new NodeSSH.NodeSSH();const logInfo = (text) =&gt; console.log(chalk.cyan(text));const logSuccess = (text) =&gt; console.log(chalk.green(text));const logError = (text) =&gt; console.log(chalk.red(text));/** * spawnCommand 执行shell命令 * @param &#123;*&#125; command 命令 string * @param &#123;*&#125; params 参数 array * @param &#123;*&#125; cwd 工作路径 * @example spawnCommand(&#39;yarn&#39;, [&#39;build&#39;], process.cwd()) */const spawnCommand = (command, params, cwd) =&gt; &#123;  return new Promise((resolve, reject) =&gt; &#123;    const result = spawn(command, params, &#123;      cwd,      stdio: &#39;inherit&#39;, // 打印命令原始输出      shell: process.platform === &#39;win32&#39;, // 兼容windows系统    &#125;);    result.on(&#39;error&#39;, (err) =&gt; &#123;      reject(err);    &#125;);    result.on(&#39;close&#39;, (code) =&gt; &#123;      if (code === 0) resolve();      else reject(code);    &#125;);  &#125;);&#125;;async function runCommand(cmd, cwd) &#123;  await SSH.execCommand(cmd, &#123;    cwd,    onStderr(chunk) &#123;      logError(`$&#123;cmd&#125;, stderrChunk, $&#123;chunk.toString(&quot;utf8&quot;)&#125;`);    &#125;,  &#125;);&#125;const configFilePath = path.resolve(process.cwd(), &quot;server.json&quot;);const config = JSON.parse(fs.readFileSync(configFilePath));async function connectServer(config) &#123;  let spinner = Ora(chalk.cyan(`[info] connecting server....\n`)).start();  const sshLoginParam = &#123;    host: config.host,    port: config.port,    username: config.username,    password: config.password,  &#125;;  await SSH.connect(sshLoginParam)    .then(() =&gt; &#123;      spinner.succeed(chalk.green(`[info] connected server \n`));    &#125;)    .catch((err) =&gt; &#123;      spinner.fail(chalk.red(`[error] connect server failed\n`));      console.log(err);      process.exit(1);    &#125;);&#125;async function deleteMainAppDir() &#123;  const spinner = Ora(    chalk.cyan(`[info] delete remote dir: main-app\n`)  ).start();  // 删除源目录  await runCommand(`rm -rf $&#123;MAIN_APP&#125;`, config.path).catch((err) =&gt; &#123;    spinner.fail(chalk.red(&quot;删除文件失败了&quot;));    console.log(&quot;[error]chmod: &quot;, err);  &#125;);  spinner.succeed(chalk.green(`[info] remote dir [main-app] is deleted`));&#125;/** * @description: 推送推送main app * @return &#123;*&#125; */async function putMainAppDir() &#123;  const localDir = path.resolve(process.cwd(), `main-app/dist`);  const remoteDir = `$&#123;config.path&#125;/$&#123;MAIN_APP&#125;`;  const successText = `[info] push $&#123;localDir&#125; to $&#123;remoteDir&#125;\n`;  const spinner = Ora(chalk.cyan(successText)).start();  try &#123;    await SSH.putDirectory(localDir, remoteDir);    spinner.succeed(chalk.green(successText));  &#125; catch (e) &#123;    spinner.fail(chalk.red(successText));  &#125;&#125;/** * @description: 重启docker 容器 * @return &#123;*&#125; */async function restartDocker() &#123;  const spinner = Ora(chalk.cyan(`[info] restart docker\n`)).start();  // 重启docker 容器  try &#123;    // 如果需要输入密码 可以常通过 sudo -S 配置 从标准输入流获取密码    // echo $&#123;passsword&#125; | sudo docker restart all    await runCommand(`docker restart all`, config.path).catch((err) =&gt; &#123;      console.log(&quot;[error]unzip: &quot;, err);    &#125;);    spinner.succeed(chalk.green(`[error] restart docker\n`));  &#125; catch (e) &#123;    spinner.fail(chalk.red(`[error] restart docker\n`));  &#125;&#125;async function deploy() &#123;  console.log(`======= 加载配置文件 ==========`);  console.log(config);  await spawnCommand(&#39;npm run&#39;, [&#39;build:all&#39;], process.cwd())  await connectServer(config);  // 删除目录  await deleteMainAppDir();  // 上传文件到指定目录  await putMainAppDir();  // 重启docker  await restartDocker();  SSH.dispose();&#125;deploy();</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svg 动画</title>
    <link href="/2023/09/10/svg-animate/"/>
    <url>/2023/09/10/svg-animate/</url>
    
    <content type="html"><![CDATA[<h1 id="svg-动画"><a href="#svg-动画" class="headerlink" title="svg 动画"></a>svg 动画</h1><p><a href="https://css-tricks.com/guide-svg-animations-smil/">动画参考资料链接链接</a> <a href="https://css-tricks.com/guide-svg-animations-smil/">https://css-tricks.com/guide-svg-animations-smil/</a></p><h2 id="SVG-dasharray"><a href="#SVG-dasharray" class="headerlink" title="SVG dasharray"></a>SVG dasharray</h2><p>stroke-dasharray 属性可以设置线段绘制时的间隔<br>stroke-dasharray 数值型值 可以配置2个，第二个值缺省</p><ul><li>stroke-dasharray&#x3D;”4” 代表dash 值和offset间距保持一直</li><li>stroke-dasharray&#x3D;”4 5”  dash宽度为4，每一块间距为5</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">baseProfile</span>=<span class="hljs-string">&quot;full&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="stroke-dashoffset"><a href="#stroke-dashoffset" class="headerlink" title="stroke-dashoffset"></a><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset">stroke-dashoffset</a></h2><p>stroke-dashoffset 指定了 dash 模式到路径开始的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">baseProfile</span>=<span class="hljs-string">&quot;full&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-dashoffset</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br>## 结合dasharray 与 stroke-dashoffset 让路径动起来<br>```html<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">baseProfile</span>=<span class="hljs-string">&quot;full&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 200, L200, 200, L400, 200&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M0, 250, L200, 250, L400, 250&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">stroke-dasharray</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-dashoffset</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">animate</span> <span class="hljs-attr">attributeName</span>=<span class="hljs-string">&quot;stroke-dashoffset&quot;</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;-20&quot;</span> <span class="hljs-attr">dur</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;freeze&quot;</span> <span class="hljs-attr">repeatCount</span>=<span class="hljs-string">&quot;indefinite&quot;</span> <span class="hljs-attr">easing</span>=<span class="hljs-string">&quot;linear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">animate</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/img/svg/svg-1.gif"></p><h2 id="模拟管道水流动动画"><a href="#模拟管道水流动动画" class="headerlink" title="模拟管道水流动动画"></a>模拟管道水流动动画</h2><p>该动画需要通过 SVGGeometryElement的 getTotalLength 获取全部路径，通过动画设置stroke-dashoffset偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;svg version=&quot;1.1&quot;<br>     baseProfile=&quot;full&quot;<br>     width=&quot;100%&quot; height=&quot;100%&quot;<br>     xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;<br>     &lt;path<br>        ref=&quot;pathEl2&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        stroke=&quot;red&quot;<br>        stroke-width=&quot;6&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;!-- &lt;animate<br>                attributeName=&quot;dash&quot;<br>                values=&quot;0;5;0&quot;<br>                dur=&quot;10s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt; --&gt;<br>            &lt;/path&gt;<br><br>     &lt;path<br>        ref=&quot;pathEl&quot;<br>        fill=&quot;none&quot;<br>        :stroke-dasharray=&quot;dashArray&quot;<br>        :stroke-dashoffset=&quot;strokeDashoffset&quot;<br>        stroke-width=&quot;6&quot;<br>        stroke=&quot;green&quot;<br>            d=&quot;M 10,30<br>            A 20,20 0,0,1 50,30<br>            A 20,20 0,0,1 90,30<br>            Q 90,60 50,90<br>            Q 10,60 10,30 z&quot; &gt;<br>            &lt;animate<br>                attributeName=&quot;stroke-dashoffset&quot;<br>                from=&quot;275&quot;<br>                to=&quot;0&quot;<br>                dur=&quot;4s&quot;<br>                repeatCount=&quot;indefinite&quot; /&gt;<br>            &lt;/path&gt; <br>&lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; onMounted, ref &#125; from &#x27;vue&#x27;;<br><br>const pathEl = ref&lt;SVGGeometryElement&gt;()<br><br>const dashArray = ref(275)<br>const strokeDashoffset = ref(-275)<br><br>onMounted(() =&gt; &#123;<br>    const totalLength = pathEl.value?.getTotalLength()<br>    console.log(totalLength)<br><br>&#125;)<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>运行效果预览<br><img src="/img/svg/svg-path-wather.gif"></p><p>其他<br>TODO</p>]]></content>
    
    
    
    <tags>
      
      <tag>svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>inkscape</title>
    <link href="/2023/09/08/inkscape/"/>
    <url>/2023/09/08/inkscape/</url>
    
    <content type="html"><![CDATA[<h1 id="Inkscape-SVG-自由绘图工具"><a href="#Inkscape-SVG-自由绘图工具" class="headerlink" title="Inkscape SVG 自由绘图工具"></a><a href="https://inkscape.org/zh-hans/doc/tutorials/basic/tutorial-basic.html">Inkscape</a> SVG 自由绘图工具</h1><h2 id="设置文档属性"><a href="#设置文档属性" class="headerlink" title="设置文档属性"></a>设置文档属性</h2><p><img src="/img/inkscape/file-property.png"></p><h2 id="单位设置"><a href="#单位设置" class="headerlink" title="单位设置"></a>单位设置</h2><p><img src="/img/inkscape/file-property.png"></p><ol><li>单位按需设置，可选px, mm 等</li><li>画布大小按需设置宽高</li><li>设置尺寸比例，此处会影响导出未svg 时的大小，建议默认设置为1</li></ol><h2 id="xml-快速编辑"><a href="#xml-快速编辑" class="headerlink" title="xml 快速编辑"></a>xml 快速编辑</h2><p><img src="/img/inkscape/xml-editor.png"></p><ul><li>通过右侧配置蓝可以快速获取页面上节点属性信息&amp;&amp; 编辑</li></ul><h2 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h2><p><img src="/img/inkscape/file-export.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>micro-app 搭建记录</title>
    <link href="/2023/09/06/micro-app/"/>
    <url>/2023/09/06/micro-app/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建平台基座"><a href="#搭建平台基座" class="headerlink" title="搭建平台基座"></a>搭建平台基座</h1><blockquote><p>基座与平台无关，技术栈 vite + vue3 + element-plus<br><a href="https://zeroing.jd.com/micro-app/docs.html#/">micro-app v0.8.1</a><br><a href="https://micro-zoe.com/docs/1.x/#/zh-cn/start">micro-app 1.0.0-beta 版本</a></p></blockquote><h2 id="通过vite-脚手架搭建项目"><a href="#通过vite-脚手架搭建项目" class="headerlink" title="通过vite 脚手架搭建项目"></a>通过vite 脚手架搭建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm 7+, extra double-dash is needed:</span><br>npm create vite@latest my-vue-app -- --template vue-ts<br><br></code></pre></td></tr></table></figure><ul><li><p>安装 micro-app </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i @micro-zoe/micro-app --save<br></code></pre></td></tr></table></figure></li><li><p>入口文件添加 <strong>micro-app</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-keyword">import</span> microApp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@micro-zoe/micro-app&#x27;</span>;<br> microApp.<span class="hljs-title function_">start</span>(&#123;<br>    <span class="hljs-attr">destroy</span>: <span class="hljs-literal">true</span><br> &#125;)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>()<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#root&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="安装element-plus"><a href="#安装element-plus" class="headerlink" title="安装element-plus"></a>安装element-plus</h2><p>| 由于 micro-app 基座应用的样式类无法被隔离，建议修改elment-plus样式类的命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i element-plus<br></code></pre></td></tr></table></figure><p>修改 element-plus 命名空间<br>element plus 当前可以全局导入，如果需要按需导入修改命名空间 可参考官网</p><p><strong>设置 ElConfigProvider</strong><br>使用 ElConfigProvider 包装您的根组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- App.vue --&gt;<br>&lt;template&gt;<br>  &lt;el-config-provider namespace=&quot;sk&quot;&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/el-config-provider&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><strong>设置 SCSS 和 CSS 变量</strong><br>创建 styles&#x2F;element&#x2F;index.scss：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// styles/element/index.scss</span><br><span class="hljs-comment">// we can add this to custom namespace, default is &#x27;el&#x27;</span><br><span class="hljs-keyword">@forward</span> <span class="hljs-string">&#x27;element-plus/theme-chalk/src/mixins/config.scss&#x27;</span> with (<br>  <span class="hljs-variable">$namespace</span>: <span class="hljs-string">&#x27;sk&#x27;</span><br>);<br><br><span class="hljs-keyword">@use</span> <span class="hljs-string">&quot;element-plus/theme-chalk/src/index.scss&quot;</span> as *;<br><span class="hljs-comment">// ...</span><br><br></code></pre></td></tr></table></figure><p>在 vite.config.ts 中导入 styles&#x2F;element&#x2F;index.scss：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">preprocessorOptions</span>: &#123;<br>      <span class="hljs-attr">scss</span>: &#123;<br>        <span class="hljs-attr">additionalData</span>: <span class="hljs-string">`@use &quot;~/styles/element/index.scss&quot; as *;`</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="子应用-vite-挂载"><a href="#子应用-vite-挂载" class="headerlink" title="子应用 vite 挂载"></a>子应用 vite 挂载</h2><ul><li>挂载子应用路由<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    ...,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/mse:*&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;mse&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/mse/index.vue&#x27;</span>),<br>    &#125;,<br>  ],<br>&#125;);<br><br></code></pre></td></tr></table></figure></li><li>vite子应用组件挂载<br>子应用micro-app 中需要区分 URL与baseroute 关系具体可<a href="https://zeroing.jd.com/micro-app/docs.html#/zh-cn/route">参考官网</a><ul><li>URL 为获取index.html静态资源的加载路由</li><li>baseroute 为下发子应用的区分路由</li></ul></li></ul><h3 id="关闭-disable-sandbox"><a href="#关闭-disable-sandbox" class="headerlink" title="关闭 disable-sandbox"></a>关闭 disable-sandbox</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mse-iframe-container&quot;</span>&gt;</span></span><br><span class="language-xml">  // 加载vite 应用需要关闭沙箱</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">micro-app</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mse&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;http://localhost:8004&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;&#123;&#125;&quot;</span> <span class="hljs-attr">baseroute</span>=<span class="hljs-string">&quot;/child/vite-vue&quot;</span> <span class="hljs-attr">inline</span> <span class="hljs-attr">disablesandbox</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">micro-app</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EventCenterForMicroApp</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@micro-zoe/micro-app&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> config, &#123; getAppUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// @ts-ignore 因为vite子应用关闭了沙箱，我们需要为子应用mse创建EventCenterForMicroApp对象来实现数据通信</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">window</span>.<span class="hljs-property">eventCenterForAppNameVite</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventCenterForMicroApp</span>(<span class="hljs-string">&#x27;mse&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.mse-iframe-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Iframe-沙箱模式加载-BETA-1-0-公测支持"><a href="#Iframe-沙箱模式加载-BETA-1-0-公测支持" class="headerlink" title="Iframe 沙箱模式加载(BETA 1.0 公测支持)"></a>Iframe 沙箱模式加载(BETA 1.0 公测支持)</h3><blockquote><p>推荐使用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">micro-app</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">:url</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span> <span class="hljs-attr">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">micro-app</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> config, &#123; getAppUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/micro-app/config.ts&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useMicroData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/micro-app/micro-data-hooks&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> name = config.<span class="hljs-property">mse</span>.<span class="hljs-property">appName</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> url = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;http://localhost:9001&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> data = <span class="hljs-title function_">reactive</span>(&#123;&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="vite-子应用"><a href="#vite-子应用" class="headerlink" title="vite 子应用"></a>vite 子应用</h1><blockquote><p>按照正常方式搭建vite 子应用，main.ts &amp;&amp; serve 服务需要改造</p></blockquote><h2 id="关闭-disable-sandbox-模式-子应用的-main-ts-配置"><a href="#关闭-disable-sandbox-模式-子应用的-main-ts-配置" class="headerlink" title="关闭 disable-sandbox 模式 子应用的 main.ts 配置"></a>关闭 disable-sandbox 模式 子应用的 main.ts 配置</h2><h3 id="main-ts-入口文件文件"><a href="#main-ts-入口文件文件" class="headerlink" title="main.ts 入口文件文件"></a>main.ts 入口文件文件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleMicroData</span> () &#123;<br>  <span class="hljs-comment">// eventCenterForAppNameVite 是基座添加到window的数据通信对象</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">eventCenterForAppNameVite</span>) &#123;<br>    <span class="hljs-comment">// 主动获取基座下发的数据</span><br>    <span class="hljs-keyword">const</span> rootData = <span class="hljs-variable language_">window</span>.<span class="hljs-property">eventCenterForAppNameVite</span>.<span class="hljs-title function_">getData</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rootData)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(router);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-title function_">handleMicroData</span>()<br><span class="hljs-comment">// 监听卸载操作</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;unmount&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  app.<span class="hljs-title function_">unmount</span>()<br>  <span class="hljs-comment">// 卸载所有数据监听函数</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">eventCenterForAppNameVite</span>?.<span class="hljs-title function_">clearDataListener</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="vite-config-ts-配置"><a href="#vite-config-ts-配置" class="headerlink" title="vite.config.ts 配置"></a>vite.config.ts 配置</h3><ul><li>server 需要支持 跨域请求</li><li>打包时处理<ul><li>指定域名设置</li><li>通过动态basePath插件 vite-plugin-dynamic-base  类似webpack __webpack_public_path__</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> vueJsx <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span><br><span class="hljs-keyword">import</span> &#123; dynamicBase &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-dynamic-base&#x27;</span><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">base</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;__dynamic_base__&quot;</span> : <span class="hljs-string">&quot;/child/vite-vue/&quot;</span>,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title function_">vueJsx</span>(),<br>    <span class="hljs-comment">//打包后 </span><br>    <span class="hljs-title function_">dynamicBase</span>(&#123;<br>      <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;window.__dynamic_base__&#x27;</span>,<br>      <span class="hljs-attr">transformIndexHtml</span>:  <span class="hljs-literal">true</span><br>    &#125;)<br>  ],<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8004</span>,<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="主应用中需要-micro-app-加载时需要plugins-需要插件处理"><a href="#主应用中需要-micro-app-加载时需要plugins-需要插件处理" class="headerlink" title="主应用中需要 micro-app 加载时需要plugins 需要插件处理"></a>主应用中需要 micro-app 加载时需要plugins 需要插件处理</h3><p>参照官网 <a href="https://zeroing.jd.com/micro-app/docs.html#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%9f%ba%e5%ba%a7%e5%ba%94%e7%94%a8">vite 基座配置</a></p><h2 id="Iframe-沙盒模式下配置"><a href="#Iframe-沙盒模式下配置" class="headerlink" title="Iframe 沙盒模式下配置"></a>Iframe 沙盒模式下配置</h2><h3 id="main-ts-配置"><a href="#main-ts-配置" class="headerlink" title="main.ts 配置"></a>main.ts 配置</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 与基座进行数据交互</span><br><span class="hljs-keyword">function</span> handle<span class="hljs-constructor">MicroData(<span class="hljs-params">router</span>: Router)</span> &#123;<br>  <span class="hljs-comment">// TODO 从全局获取数据，等APP 应用完全号了后规划</span><br>  const rootData = window.microApp.get<span class="hljs-constructor">GlobalData()</span>;<br>  handle<span class="hljs-constructor">RootData(<span class="hljs-params">rootData</span>, <span class="hljs-params">router</span>)</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (is<span class="hljs-constructor">InMicroApp()</span>) &#123;<br>  handle<span class="hljs-constructor">MicroData(<span class="hljs-params">router</span>)</span>;<br>  <span class="hljs-comment">// 卸载应用</span><br>  window.unmount =<span class="hljs-function"> <span class="hljs-params">()</span> =&gt;</span> &#123;<br>    app.unmount<span class="hljs-literal">()</span>;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="vite-config-ts-配置-1"><a href="#vite-config-ts-配置-1" class="headerlink" title="vite-config.ts 配置"></a>vite-config.ts 配置</h3><p>  <a href="https://micro-zoe.com/docs/1.x/#/zh-cn/framework/vite?id=%e4%bd%9c%e4%b8%ba%e5%ad%90%e5%ba%94%e7%94%a8">参考官网</a></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><a href="https://zeroing.jd.com/micro-app/docs.html#/zh-cn/deploy">参考官网配置</a></p><h1 id="问题-解决方案"><a href="#问题-解决方案" class="headerlink" title="问题&amp;&amp;解决方案"></a>问题&amp;&amp;解决方案</h1><h2 id="0-8-1-版本中部署后无法加载vite-子应用"><a href="#0-8-1-版本中部署后无法加载vite-子应用" class="headerlink" title="0.8.1 版本中部署后无法加载vite 子应用"></a>0.8.1 版本中部署后无法加载vite 子应用</h2><ul><li><p>检查 window.__dynamic_base__ 是否初始化成功</p><blockquote><p>可以在index.html 页面用立即执行函数来初始化 __dynamic_base__ 变量</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">__dynamic_base__</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">rawWindow__dynamic_base__</span> </span><br><span class="language-javascript">  &#125;)()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>检查基座是否开启vite 子应用的预加载</p><blockquote><p>基座应用加载 vite-vue 子应用时使用了预加载模式，预加载时，子应用的index.html 引用的js 文件&amp;&amp; css 文件地址会直接设置未相对地址，基座中关闭vite 子应用的预加载即可</p></blockquote></li></ul><h2 id="父子资源样式相互污染"><a href="#父子资源样式相互污染" class="headerlink" title="父子资源样式相互污染"></a>父子资源样式相互污染</h2><ul><li>如果基座样式库使用 elment-plus(2.2.0版本及以上) 可以通过自定义命名空间规避污染</li><li>开启沙盒模式进行样式隔离</li></ul><h2 id="iframe-沙箱下-vite-子应用的接口请求总是-cors-error"><a href="#iframe-沙箱下-vite-子应用的接口请求总是-cors-error" class="headerlink" title="iframe 沙箱下 vite 子应用的接口请求总是 cors-error"></a>iframe 沙箱下 vite 子应用的接口请求总是 cors-error</h2><p><img src="/img/micro-app/cors-error.png"></p><p>原因可能在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials">MDN COROS policy</a></p><ol><li>vite 子应用 axios withCredentials 设置为false</li><li>baseUrl 建议设置和父级同层的URL</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> basepath = <span class="hljs-string">&#x27;/xxxx&#x27;</span><br><span class="hljs-keyword">const</span> http = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">__MICRO_APP_ENVIRONMENT__</span> ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">origin</span> + basepath :  basepath,<br>  <span class="hljs-attr">withCredentials</span>: !<span class="hljs-variable language_">window</span>.<span class="hljs-property">__MICRO_APP_ENVIRONMENT__</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
